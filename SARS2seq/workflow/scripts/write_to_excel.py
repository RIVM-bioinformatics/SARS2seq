from xlsxwriter.workbook import Workbook
import argparse
import pandas as pd

# cp sequences.xlsx /data/BioGrid/projecten/bsr_amr/sequences.xlsx
# python /mnt/scratch_dir/landmanf/coverage_plot_new/testdir/exceltest.py --fancy vari_df.csv --workbook sequences.xlsx

args = argparse.ArgumentParser()

args.add_argument(
    "--primer_matches",
    metavar="File",
    type=str,
    help="Input csv file with primer comparisons as generated by gc_content.py",
    required=True,
)

args.add_argument(
    "--workbook",
    metavar="File",
    type=str,
    help="Output file written to xlsx with rich formatting",
    required=True,
)

flags = args.parse_args()

def WriteToExcel(primer_matches, outputworkbook):
    csv_header = ['Primer_name', 'Mismatches', 'Length', 'Isolate_primer_sequence', 'Reference_primer_sequence']
    fancy_data = pd.read_csv(primer_matches, names=csv_header)
    names = list(fancy_data.Primer_name)
    mismatches = list(fancy_data.Mismatches)
    length = list(fancy_data.Length)
    isolate_primer_seq = list(fancy_data.Isolate_primer_sequence)
    reference_primer_seq = list(fancy_data.Reference_primer_sequence)
    workbook = Workbook(outputworkbook)
    worksheet = workbook.add_worksheet()
    green = workbook.add_format({'color': 'green'})
    red_bold = workbook.add_format({'bold': True, 'color': 'red'})
    cell_format = workbook.add_format({'bold': True})
    worksheet.set_row(0, None, cell_format)
    worksheet.set_column('A:A', 25)
    worksheet.set_column('B:C', 15)
    worksheet.set_column('D:E', 40)

    for row_num, sequence in enumerate(isolate_primer_seq):
        format_pairs = []
        other_sequence = []

        # Get each DNA base character from each sequence.
        for index2, base in enumerate(sequence.upper()):
            if index2 + 1 == len(reference_primer_seq[row_num]):
                if len(isolate_primer_seq[row_num]) > len(reference_primer_seq[row_num]):
                    remaining_seq1 = isolate_primer_seq[row_num][index2+1:]
                    format_pairs.extend((red_bold, remaining_seq1))
                    break # break from loop if index is larger than length of reference and append remaining sequence as red
            
            matching_base = reference_primer_seq[row_num][index2]
            if base != matching_base:
                format_pairs.extend((red_bold, base))
                other_sequence.extend((red_bold, matching_base))

            else:
                format_pairs.extend((green, base))
                other_sequence.extend((green, base))
            if index2 + 1 == len(isolate_primer_seq[row_num]):
                # This means I'm at the last iteration
                if len(reference_primer_seq[row_num]) > len(isolate_primer_seq[row_num]):
                    remaining_seq2 = reference_primer_seq[row_num][index2+1:]
                    other_sequence.extend((red_bold, remaining_seq2))

        name_str = str(names[row_num])
        mismatch_str = int(mismatches[row_num])
        length_str = int(length[row_num])

        if row_num == 0: # This is for writing the header:
            for ind, x in enumerate(csv_header):
                worksheet.write_string(row_num, ind, x)

        row_num_to_write= row_num + 1 # Need a +1 else the header gets overwritten.
        worksheet.write_string(row_num_to_write, 0, name_str)
        worksheet.write_number(row_num_to_write, 1, mismatch_str)
        worksheet.write_number(row_num_to_write, 2, length_str)
        worksheet.write_rich_string(row_num_to_write, 3, *format_pairs)
        worksheet.write_rich_string(row_num_to_write, 4, *other_sequence)

    workbook.close()

WriteToExcel(flags.primer_matches, flags.workbook)